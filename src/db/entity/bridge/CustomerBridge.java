package db.entity.bridge;

import java.lang.Integer;
import db.entity.Customer;
import db.entity.PricingModelEnum;
import db.interfaces.*;
import db.entity.Payment;
import java.sql.SQLException;
import annotations.AutoGenerated;
import java.util.ArrayList;
import java.sql.Timestamp;
import db.entity.Address;
import visitor.Visitor;
import java.util.List;
import java.lang.Double;
import db.entity.SystemUser;
import java.lang.String;
import db.entity.Person;

@AutoGenerated
public class CustomerBridge implements IEntityBridge {

	private static final String TableName = "customer";

	private static Object _lock = new Object();
	private static CustomerBridge _instance;
	
	private CustomerBridge() {}

	public static CustomerBridge getInstance() {
		if (_instance == null) {
			synchronized(_lock) {
				if (_instance == null) {
					_instance = new CustomerBridge();
				}
			}
		}
		return _instance;
	}

	public IEntity createEntity() {
		return new Customer();
	}

	@Override
	public void populateEntity(IEntity ientity, IGetValue<Integer, String, Object, Object> iterator) throws SQLException, InterruptedException {
		Customer entity = (Customer) ientity;
		entity.setId((Integer) iterator.get(0, "id", entity.getId()));
		entity.setCustomerId((Integer) iterator.get(1, "customer_id", entity.getCustomerId()));
		entity.setCustomerType((String) iterator.get(2, "customer_type", entity.getCustomerType()));
		entity.setCompanyName((String) iterator.get(3, "company_name", entity.getCompanyName()));
		entity.setRating((Double) iterator.get(4, "rating", entity.getRating()));
		entity.setLastRatingTime((Timestamp) iterator.get(5, "last_rating_time", entity.getLastRatingTime()));
		entity.setAddress((Address) iterator.get(6, "address_fk", entity.getAddress()));
		entity.setPricingModelEnum((PricingModelEnum) iterator.get(7, "pricing_model_enum_fk", entity.getPricingModelEnum()));
		entity.setSystemUser((SystemUser) iterator.get(8, "system_user_fk", entity.getSystemUser()));
		entity.setPerson((Person) iterator.get(9, "person_fk", entity.getPerson()));
		entity.setPayment((Payment) iterator.get(10, "payment_fk", entity.getPayment()));
	}

	@Override
	public void collectFromEntity(IEntity ientity, ISetValue<Integer, String, Object> iterator) throws SQLException, InterruptedException {
		Customer entity = (Customer) ientity;
		iterator.set(0, "id", entity.getId());
		iterator.set(1, "customer_id", entity.getCustomerId());
		iterator.set(2, "customer_type", entity.getCustomerType());
		iterator.set(3, "company_name", entity.getCompanyName());
		iterator.set(4, "rating", entity.getRating());
		iterator.set(5, "last_rating_time", entity.getLastRatingTime());
		iterator.set(6, "address_fk", entity.getAddress());
		iterator.set(7, "pricing_model_enum_fk", entity.getPricingModelEnum());
		iterator.set(8, "system_user_fk", entity.getSystemUser());
		iterator.set(9, "person_fk", entity.getPerson());
		iterator.set(10, "payment_fk", entity.getPayment());
	}

	@Override
	public void accept(IEntity entity, Visitor visitor) {
		visitor.visit((Customer) entity);
	}

	@Override
	public String getTableName() {
		return TableName;
	}

	@Override
	public List<IEntity> getForeignEntities(IEntity ientity) {
		Customer entity = (Customer) ientity;
		List<IEntity> list = new ArrayList<IEntity>();
		list.add(entity.getAddress());
		list.add(entity.getPricingModelEnum());
		list.add(entity.getSystemUser());
		list.add(entity.getPerson());
		list.add(entity.getPayment());
		return list;
	}
}
