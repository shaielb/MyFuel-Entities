package db.entity.bridge;

import java.util.List;
import java.lang.Integer;
import db.interfaces.*;
import java.sql.SQLException;
import java.lang.String;
import java.sql.Time;
import annotations.AutoGenerated;
import db.entity.AnalyticalRatings;
import java.util.ArrayList;
import visitor.Visitor;

@AutoGenerated
public class AnalyticalRatingsBridge implements IEntityBridge {

	private static final String TableName = "analytical_ratings";

	private static Object _lock = new Object();
	private static AnalyticalRatingsBridge _instance;
	
	private AnalyticalRatingsBridge() {}

	public static AnalyticalRatingsBridge getInstance() {
		if (_instance == null) {
			synchronized(_lock) {
				if (_instance == null) {
					_instance = new AnalyticalRatingsBridge();
				}
			}
		}
		return _instance;
	}

	public IEntity createEntity() {
		return new AnalyticalRatings();
	}

	@Override
	public void populateEntity(IEntity ientity, IGetValue<Integer, String, Object, Object> iterator) throws SQLException, InterruptedException {
		AnalyticalRatings entity = (AnalyticalRatings) ientity;
		entity.setId((Integer) iterator.get(0, "id", entity.getId()));
		entity.setCustomerPricingModel((String) iterator.get(1, "customer_pricing_model", entity.getCustomerPricingModel()));
		entity.setFuelType((String) iterator.get(2, "fuel_type", entity.getFuelType()));
		entity.setStartFuelingTime((Time) iterator.get(3, "start_fueling_time", entity.getStartFuelingTime()));
		entity.setEndFuelingTime((Time) iterator.get(4, "end_fueling_time", entity.getEndFuelingTime()));
		entity.setRating((Integer) iterator.get(5, "rating", entity.getRating()));
	}

	@Override
	public void collectFromEntity(IEntity ientity, ISetValue<Integer, String, Object> iterator) throws SQLException, InterruptedException {
		AnalyticalRatings entity = (AnalyticalRatings) ientity;
		iterator.set(0, "id", entity.getId());
		iterator.set(1, "customer_pricing_model", entity.getCustomerPricingModel());
		iterator.set(2, "fuel_type", entity.getFuelType());
		iterator.set(3, "start_fueling_time", entity.getStartFuelingTime());
		iterator.set(4, "end_fueling_time", entity.getEndFuelingTime());
		iterator.set(5, "rating", entity.getRating());
	}

	@Override
	public void accept(IEntity entity, Visitor visitor) {
		visitor.visit((AnalyticalRatings) entity);
	}

	@Override
	public String getTableName() {
		return TableName;
	}

	@Override
	public List<IEntity> getForeignEntities(IEntity ientity) {
		AnalyticalRatings entity = (AnalyticalRatings) ientity;
		List<IEntity> list = new ArrayList<IEntity>();

		return list;
	}
}
